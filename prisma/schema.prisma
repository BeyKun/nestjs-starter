// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id          String @id @default(uuid())
  name        String
  email       String @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Assignment  Assignment[]
  Trash       Trash[]
}

model Domain {
  id          String  @id @default(uuid())
  name        String
  description String
  parentId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Assignment  Assignment[]
  RoleSetting RoleSetting[]
}

model Assignment {
  id          String @id @default(uuid())
  domainId    String
  userId      String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Domain      Domain @relation(fields: [domainId], references: [id])
  User        User @relation(fields: [userId], references: [id])
  Role        Role @relation(fields: [roleId], references: [id])
}

model Role {
  id            String @id @default(uuid())
  name          String
  description   String
  Assignment    Assignment[]
  RoleSetting   RoleSetting[]
}

model RoleSetting {
  id          String @id @default(uuid())
  roleId      String
  domainId    String
  moduleId    String
  action      Action
  isAllowed   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Role        Role @relation(fields: [roleId], references: [id])
  Domain      Domain @relation(fields: [domainId], references: [id])
  Module      Module @relation(fields: [moduleId], references: [id])
}

model Module {
  id            String @id @default(uuid())
  name          String
  description   String
  constant      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  RoleSetting   RoleSetting[]
}
model Trash {
  id        String @id @default(uuid())
  module    String
  data      Json
  userId    String
  createdAt DateTime @default(now())
  User      User @relation(fields: [userId], references: [id])
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}